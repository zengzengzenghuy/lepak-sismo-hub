"use strict";
/*
 * Copyright (C) 2020 Klaus Reimer <k@ailis.de>
 * See LICENSE.md for licensing information.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
const vm_1 = require("vm");
const jest_environment_node_1 = __importDefault(require("jest-environment-node"));
/** Special context which is handled specially in the hacked runInContext method below */
const RUN_IN_THIS_CONTEXT = {};
/** Remembered original runInContext method. */
const origRunInContext = vm_1.Script.prototype.runInContext;
/**
 * Ugly hack to allow Jest to just use a single Node VM context. The Jest code in question is in a large private
 * method of the standard Jest runtime and it would be a lot of code-copying to create a custom runtime which
 * replaces the script run code. So we hack into the `script.runInContext` method instead to redirect it to
 * `script.runInThisContext` when environment returns the special [[RUN_IN_THIS_CONTEXT]] context.
 */
vm_1.Script.prototype.runInContext = function (context, options) {
    if (context === RUN_IN_THIS_CONTEXT) {
        return this.runInThisContext(options);
    }
    else {
        return origRunInContext.call(this, context, options);
    }
};
class SingleContextNodeEnvironment extends jest_environment_node_1.default {
    constructor(config, context) {
        super(config, context);
        // Use shared global environment for all tests
        this.global = global;
    }
    getVmContext() {
        // Return special context which is handled specially in the hacked `script.runInContext` function
        return RUN_IN_THIS_CONTEXT;
    }
}
module.exports = SingleContextNodeEnvironment;
//# sourceMappingURL=SingleContextNodeEnvironment.js.map