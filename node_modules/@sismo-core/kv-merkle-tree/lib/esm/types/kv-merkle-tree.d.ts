import { BigNumber } from "ethers";
import { HashFunction, MerkleTreeData, JsonMerkleTree, MerklePath } from "./types";
export declare class KVMerkleTree {
    private tree;
    private pointers;
    private root;
    private hashFunction;
    private height;
    private forceHeight;
    private hashLeaves;
    /**
     * @param data Data used to generate your Merkle tree
     * @param hashFunction Hash function used to generate your Merkle tree
     * @param forceHeight Force the number of levels in your Merkle tree
     * @param hashLeaves Define if your leaf will be hashed or not
     * @param jsonMerkleTree Used only by fromJson function
     * @param leaves Used only by fromLeaves function
     */
    constructor(data: MerkleTreeData | null, hashFunction?: HashFunction | null, forceHeight?: number | null, hashLeaves?: boolean, jsonMerkleTree?: JsonMerkleTree | null, leaves?: string[] | null);
    private initFromLeaves;
    private initFromData;
    private createNodes;
    private fillNodesWithPowerOf2Length;
    getMerklePathFromKey(key: string): MerklePath;
    getMerklePathFromLeaf(leaf: string): MerklePath;
    verifyMerklePath(merklePath: MerklePath, leaf: string): boolean;
    getValue(key: string): BigNumber;
    getLeaf(key: string): BigNumber;
    getPosition(key: string): number;
    getRoot(): BigNumber;
    getHeight(): number;
    static fromLeaves(leaves: string[], hashFunction: HashFunction, forceHeight?: number | null, hashLeaves?: boolean): KVMerkleTree;
    static fromJson(jsonMerkleTree: JsonMerkleTree): KVMerkleTree;
    toJson(): JsonMerkleTree;
}
